---
version: 1.0

description: GenAI Actions

input:
  - incident_id
  - ci_name
  - tower
  - username
  - password
  - winrm_password
  - winrm_username
  - linux_username
  - linux_password
  - action

vars:
  - error_message: ""
  - final_notes: ""
  - final_inc_notes: ""
  - command_output: ""

output:
  - final_notes: "{{ ctx().final_notes }}"
  - final_inc_notes: "{{ ctx().final_inc_notes }}"

tasks:
  check_tower:
    action: core.noop
    next:
      - when: "{{ 'windows' in ctx().tower | lower}}"
        publish:
          - os_type: 'windows'
        do: 
          - check_win_credentials
      - when: "{{ 'linux' in ctx().tower | lower or 'unix' in ctx().tower | lower or 'network' in ctx().tower | lower }}"
        publish:
          - os_type: 'linux'
        do: 
          - check_lin_credentials
      - when: "{{ ctx().tower not in ['windows', 'linux', 'unix', 'network'] }}"
        publish:
          - final_inc_notes: 'Error: Invalid Tower.'
        do: 
          - noop

  check_win_credentials:
    action: core.noop
    next:
      - when: "{{ ctx().username }}"
        publish:
          - winrm_username: "{{ ctx().username }}"
          - winrm_password: "{{ ctx().password }}"
        do:
          - check_action
      - when: "{{ not ctx().username }}"
        do:
          - check_action

  check_lin_credentials:
    action: core.noop
    next:
      - when: "{{ ctx().username }}"
        publish:
          - linux_username: "{{ ctx().username }}"
          - linux_password: "{{ ctx().password }}"
        do:
          - check_action
      - when: "{{ not ctx().username }}"
        do:
          - check_action

  check_action:
    action: core.noop
    next:
      - when: "{{ ctx().action == 'Server Reachable' and ctx().os_type | lower == 'windows' }}"
        do:
          - execute_windows_command

      - when: "{{ ctx().action == 'Get Server Uptime' and ctx().os_type | lower == 'windows' }}"
        do:
          - get_uptime_windows

  execute_windows_command:
    action: core.local
    input:
      cmd: "ping -c 4 {{ ctx().ci_name }}"
    next:
      - when: "{{ succeeded() and '4 received' in result().stdout }}"
        publish:
          - final_inc_notes: "Ping Successful:\n\n{{ result().stdout }}"
        do:
          - noop
      - when: "{{ succeeded() and '4 received' not in result().stdout }}"
        publish:
          - final_inc_notes: "Ping Failed:\\n\n{{ result().stdout }}"
        do:
          - noop
      - when: "{{ failed() }}"
        publish:
          # - final_notes: "Ping Failed:\\n\n{{ result().get(ctx().ci_name, {}).get('stdout', '') }}"
          - final_inc_notes: "Ping Failed:\\n\n{{ result().stdout }}"
        do:
          - check_telnet_port
  
  check_telnet_port:
    action: core.noop
    next:
      - when: "{{ 'windows' in ctx().os_type | lower }}"
        publish:
          - telnet_command: "nc -zv {{ ctx().ci_name }} 5985 2>&1"
        do:
          - telnet_test
      - when: "{{ 'linux' in ctx().os_type | lower }}"
        publish:
          - telnet_command: "nc -zv {{ ctx().ci_name }} 22 2>&1"
        do:
          - telnet_test

  telnet_test:
    action: core.local
    input:
      cmd: "{{ ctx().telnet_command }}"
    next:
      - when: "{{ 'Connected to' in result().stdout }}"
        publish:
          - ping_result: "Ping was not responding. Connection to the server via port is successful."
          - run_error_cmd_ping: false
          - final_inc_notes: "Ping was not responding. Connection to the server via port is successful.\n Server Details: {{ ctx().ci_name }}"
        do:
          - noop
      - when: "{{ 'Connected to' not in result().stdout }}"
        do:
          - noop

  get_uptime_windows:
    action: core.winrm_ps_cmd
    input:
      host: "{{ ctx().ci_name }}"
      password: "{{ ctx().winrm_password }}"
      username: "{{ ctx().winrm_username }}"
      verify_ssl_cert: False
      port: 5985
      scheme: "https"
      timeout: 300
      cmd: "$OS=Get-WmiObject win32_operatingsystem;$BootTime=$OS.ConvertToDateTime($OS.LastBootUpTime);$Uptime=$OS.ConvertToDateTime($OS.LocalDateTime)-$BootTime;$Uptime | ForEach-Object{ Write-Host $_.Days days, $_.Hours hours, $_.Minutes minutes}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - uptime_value: "{{ result().stdout | trim }}"
          - uptime_days: "{{ result().stdout.split(' ')[0] | int }}"
          - final_inc_notes: "Server {{ ctx().ci_name }} Uptime:\\n\n{{ result().stdout }}"
        do:
          - noop
      - when: "{{ failed() and 'error' not in result() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - error_message: "Automation not able to connect to {{ ctx().ci_name }}.\n{{ result().stdout }}\n{{ result().stderr }}"
          - run_error: true
          - run_error_uptime: true
        do:
          - noop 
      - when: "{{ failed() and 'error' in result() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - error_message: "Automation not able to connect to {{ ctx().ci_name }}.\n\n{{ result().error }}"
          - run_error: true
          - run_error_uptime: true
        do:
          - noop

  # get_uptime_linux:
  #   action: core.remote
  #   input:
  #     hosts: "{{ ctx().ci_name }}"
  #     password: "{{ ctx().linux_username }}"
  #     username: "{{ ctx().linux_password }}"
  #     # The following command will return the uptime in "x days, y hours, z minutes" format
  #     cmd: "uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7==\"min\") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,\"days,\",h+0,\"hours,\",m+0,\"minutes\"}'"
  #   next:
  #     - when: "{{ succeeded() }}"
  #       publish:
  #         - end_timestamp: "{{ task('get_uptime_linux').end_timestamp }}"
  #         - uptime_value: "{{ result()[ctx().ci_name].stdout }}"
  #         - uptime_days: "{{ result()[ctx().ci_name].stdout.split(' ')[0] | int }}"
  #       do:
  #         - noop
  #     - when: "{{ failed() }}"
  #       publish:
  #         - end_timestamp: "{{ task('get_uptime_linux').end_timestamp }}"
  #         - error_message: "Could not connect to {{ ctx().ci_name }}"
  #         - uptime_value: "NA(Error: {{ ctx().error_message }})"
  #         - run_error: true
  #         - run_error_uptime: true
  #       do:
  #         - noop

