---
version: 1.0

description: GenAI Actions

input:
  - incident_id
  - ci_name
  - tower
  - username
  - password
  - winrm_password
  - winrm_username
  - linux_username
  - linux_password
  - action

vars:
  - error_message: ""
  - final_notes: ""
  - final_inc_notes: ""
  - command_output: ""

output:
  - final_notes: "{{ ctx().final_notes }}"
  - final_inc_notes: "{{ ctx().final_inc_notes }}"

tasks:
  check_tower:
    action: core.noop
    next:
      - when: "{{ 'windows' in ctx().tower | lower}}"
        publish:
          - os_type: 'windows'
        do:
          - check_win_credentials

      - when: "{{ 'linux' in ctx().tower | lower or 'unix' in ctx().tower | lower or 'network' in ctx().tower | lower }}"
        publish:
          - os_type: 'linux'
        do:
          - check_lin_credentials

      - when: "{{ ctx().tower not in ['windows', 'linux', 'unix', 'network'] }}"
        publish:
          - final_inc_notes: 'Error: Invalid Tower.'
        do:
          - noop

  check_win_credentials:
    action: core.noop
    next:
      - when: "{{ ctx().username }}"
        publish:
          - winrm_username: "{{ ctx().username }}"
          - winrm_password: "{{ ctx().password }}"
        do:
          - check_action

      - when: "{{ not ctx().username }}"
        do:
          - check_action

  check_lin_credentials:
    action: core.noop
    next:
      - when: "{{ ctx().username }}"
        publish:
          - linux_username: "{{ ctx().username }}"
          - linux_password: "{{ ctx().password }}"
        do:
          - check_action

      - when: "{{ not ctx().username }}"
        do:
          - check_action

  check_action:
    action: core.noop
    next:
      - when: "{{ ctx().action == 'Server Reachable' and ctx().os_type | lower == 'windows' }}"
        do:
          - execute_windows_command

      - when: "{{ ctx().action == 'Get Server Uptime' and ctx().os_type | lower == 'windows' }}"
        do:
          - get_uptime_windows

  execute_windows_command:
    action: core.local
    input:
      cmd: "ping -c 4 {{ ctx().ci_name }}"
    next:
      - when: "{{ succeeded() and '4 received' in result().stdout }}"
        publish:
          - final_inc_notes: "Ping Successful:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Ping Test Successful</summary>
                <pre>{{ result().stdout }}</pre>
              </details>

      - when: "{{ succeeded() and '4 received' not in result().stdout }}"
        publish:
          - final_inc_notes: "Ping Failed:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Ping Test Failed</summary>
                <pre>{{ result().stdout }}</pre>
              </details>

      - when: "{{ failed() }}"
        publish:
          - final_inc_notes: "Ping Error:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Ping Command Error</summary>
                <pre>{{ result().stdout }}</pre>
              </details>
        do:
          - check_telnet_port

  check_telnet_port:
    action: core.noop
    next:
      - when: "{{ 'windows' in ctx().os_type | lower }}"
        publish:
          - telnet_command: "nc -zv {{ ctx().ci_name }} 5985 2>&1"
        do:
          - telnet_test

      - when: "{{ 'linux' in ctx().os_type | lower }}"
        publish:
          - telnet_command: "nc -zv {{ ctx().ci_name }} 22 2>&1"
        do:
          - telnet_test

  telnet_test:
    action: core.local
    input:
      cmd: "{{ ctx().telnet_command }}"
    next:
      - when: "{{ 'Connected to' in result().stdout }}"
        publish:
          - final_inc_notes: "Telnet to port successful:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Telnet Test Successful</summary>
                <pre>{{ result().stdout }}</pre>
              </details>

      - when: "{{ 'Connected to' not in result().stdout }}"
        publish:
          - final_inc_notes: "Telnet Test Failed:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Telnet Test Failed</summary>
                <pre>{{ result().stdout }}</pre>
              </details>

  get_uptime_windows:
    action: core.winrm_ps_cmd
    input:
      host: "{{ ctx().ci_name }}"
      password: "{{ ctx().winrm_password }}"
      username: "{{ ctx().winrm_username }}"
      verify_ssl_cert: False
      port: 5985
      scheme: "https"
      timeout: 300
      cmd: >
        $OS=Get-WmiObject win32_operatingsystem;
        $BootTime=$OS.ConvertToDateTime($OS.LastBootUpTime);
        $Uptime=$OS.ConvertToDateTime($OS.LocalDateTime)-$BootTime;
        $Uptime | ForEach-Object{ Write-Host $_.Days days, $_.Hours hours, $_.Minutes minutes }
    next:
      - when: "{{ succeeded() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - uptime_value: "{{ result().stdout | trim }}"
          - uptime_days: "{{ result().stdout.split(' ')[0] | int }}"
          - final_inc_notes: "Server Uptime:\n\n{{ result().stdout }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Server Uptime</summary>
                <pre>{{ result().stdout }}</pre>
              </details>

      - when: "{{ failed() and 'error' not in result() }}"
        publish:
          - error_message: "Automation not able to connect to {{ ctx().ci_name }}.\n{{ result().stdout }}\n{{ result().stderr }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Uptime Command Error</summary>
                <pre>{{ result().stdout }}
                {{ result().stderr }}</pre>
              </details>

      - when: "{{ failed() and 'error' in result() }}"
        publish:
          - error_message: "Automation not able to connect to {{ ctx().ci_name }}.\n\n{{ result().error }}"
          - final_notes: |
              <style>
                .section { margin: 10px 0; border: 1px solid #ccc; border-radius: 6px; overflow: hidden; }
                .section summary { background: #f5f5f5; padding: 10px; font-weight: bold; cursor: pointer; }
                .section pre { margin: 0; padding: 10px; background: #fafafa; font-family: Consolas, monospace; font-size: 13px; white-space: pre-wrap; word-break: break-word; }
              </style>
              <details class="section" open>
                <summary>Uptime Command Error</summary>
                <pre>{{ result().error }}</pre>
              </details>
